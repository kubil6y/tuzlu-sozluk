generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]

    posts    Post[]
    comments Comment[]
    votes    Vote[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Post {
    id        String   @id @default(cuid())
    title     String
    body      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId    String
    User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    channelId String
    channel   Channel   @relation(fields: [channelId], references: [id])
    comments  Comment[]
    votes     Vote[]
}

model Channel {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    posts Post[]
}

model Comment {
    id        String   @id @default(cuid())
    body      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId String
    Post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

enum VoteType {
    Up
    Down
}

model Vote {
    id        String   @id @default(cuid())
    type      VoteType
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId String
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}
